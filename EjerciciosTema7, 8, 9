package EjerciciosTema789;


import javax.sound.midi.Soundbank;
import java.awt.image.AreaAveragingScaleFilter;
import java.io.*;
import java.util.*;

public class EjerciciosTema789 {
    public EjerciciosTema789() throws FileNotFoundException {
    }

    public static void main(String[] args) {
        Scanner scanner1 = new Scanner(System.in);

        /**
         * Ejercicio 0: Invertir un string.
         */

        System.out.println("Introduce un texto: ");
        String texto = scanner1.nextLine();
        System.out.println(reverse(texto));

        /**
         * Ejericio 1:  Crear un array de String y recorrerlo para sacar sus valores.
          */

       String[] unidimension = {"Jose Maria", "Antonio Jose", "Jose Luis"};
       for (int i = 0; i < unidimension.length; i++){
           System.out.println(unidimension[i]);
       }
        /**
         * Ejercicio 2: Imprimir dimensiones en un array bidimensional y su valor en ellas.
          */

        int bidimension[][] = {
                {1,2,3,4},
                {10,20,30,40}
        };

       for (int i = 0; i < bidimension.length; i++) {
           for (int j = 0; j < bidimension[i].length; j++) {
               System.out.println("Posicion en i = " + i + " y j = " + j + " --> " + bidimension[i][j]);
           }
       }
        /**
         * Ejercicio 3: Crear un vector, aumentarle la capacidad y eliminar posiciones en concreto.
         */

        Vector<Integer> vector = new Vector<>(5, 5);
        vector.add(10);
        vector.add(20);
        vector.add(30);
        vector.add(40);
        vector.add(50);

        for (int i = 0; i < vector.size(); i++){
            System.out.println("Posicion " + i + " --> " + vector.get(i));
        }

        System.out.println("ELIMINAMOS LAS POSICIONES 2 Y 3");

        for (int i = 0; i < vector.size(); i++){
            if(i == 2 || i == 3){
                vector.remove(i);
                continue;
            }
            System.out.println("Posicion " + i + " --> " + vector.get(i));
        }
        vector.trimToSize();
        System.out.println("Ahora mi vector tiene = " + vector.capacity() + " de capacidad");

        /**
         * Ejercicio 4: Indica cuál es el problema de utilizar un Vector con la capacidad por defecto si tuviésemos 1000 elementos para ser añadidos al mismo
         * Respuesta: Los vectores, por defecto, comienzan con una capacidad de 10 unidades, si tuviésemos 1000 elementos a los que escalar, conllevaría muchísimos procesos
         * y consumiríamos mucha memoria, por lo que una solucion sería proporcionarle un Increment Capacity mayor para no realizar tantos procesos, o, si sabemos que vamos a tener
         * mucho tráfico, darle una capacidad por defecto mayor aumentando el valor de Initial Capacity.
         */

        /**
         * Ejericio 5: Crea un ArrayList de tipo String, con 4 elementos. Cópialo en una LinkedList. Recorre ambos mostrando únicamente el valor de cada elemento.
         */

        ArrayList<String> arrayList = new ArrayList<>();
        arrayList.add("Hola");
        arrayList.add("Me llaman");
        arrayList.add("Romeo");
        arrayList.add("Es un placer");

        LinkedList<String> linkedList = new LinkedList<>(arrayList);

        System.out.println("Imprimimos el ArrayList");
        for(int i = 0; i < arrayList.size(); i++){
            System.out.println(arrayList.get(i));
        }
        System.out.println("Imprimimos la LinkedList");
        for (int j = 0; j < linkedList.size(); j++){
            System.out.println(linkedList.get(j));
        }

        /**Ejercicio 6: Crea un ArrayList de tipo int, y, utilizando un bucle rellénalo con elementos 1..10. A continuación, con otro bucle, recórrelo y elimina los numeros pares.
         *Por último, vuelve a recorrerlo y muestra el ArrayList final. Si te atreves, puedes hacerlo en menos pasos, siempre y cuando cumplas el primer "for" de relleno.
         */
        ArrayList<Integer> relleno = new ArrayList<Integer>(10);

        System.out.println("Mostramos el ArrayList final eliminando los pares");
        for(int i = 1; i <= 10; i++){
               if(i % 2 != 0){
                   relleno.add(i);
               }

        }
        System.out.println(relleno);

        /**
         *Ejercicio 7: Crea una función DividePorCero.
        * Esta, debe generar una excepción ("throws") a su llamante del tipo ArithmeticException que será capturada por su llamante (desde "main", por ejemplo).
        * Si se dispara la excepción, mostraremos el mensaje "Esto no puede hacerse". Finalmente, mostraremos en cualquier caso: "Demo de código".
        */

        System.out.println("Ejercicio 7: ");

        try {
            int resultadoDiv1 = DividePorCero(4, 0);
        }catch (ArithmeticException e){
            System.out.println("Esto no puede hacerse");
        }finally {
            System.out.println("Demo de codigo");
        }

        System.out.println("Ejericio 8");
        /**
         * Ejercicio 8: Utilizando InputStream y PrintStream, crea una función que reciba dos parámetros: "fileIn" y "fileOut".
         * La tarea de la función será realizar la copia del fichero dado en el parámetro "fileIn" al fichero dado en "fileOut".
         */

            copiarFichero("fileIN.txt", "fileOUT.txt"); //Funciona que flipas.

        System.out.println("Ejercicio 9: ");
        /**
         * Ejericio 9: Sorpréndenos creando un programa de tu elección que utilice InputStream, PrintStream, excepciones, un HashMap y un ArrayList, LinkedList o array.
         */

            programaMio("fileIN.txt", "fileOUT.txt");
    }

    public static void programaMio (String fileIn, String fileOut){
        HashMap<String, Integer> map = new HashMap<>(); //Realizo un HashMap dandole valores
        map.put("Pascual", 25);
        map.put("Alvaro", 28);
        map.put("Lidia", 23);
        map.put("Luis", 26);

        ArrayList<String> nombres = new ArrayList<>(); //Realizo un ArrayList, añadiendo valores.
        nombres.add("Juan");
        nombres.add("Miguel");
        nombres.add("Chicha");

        //Aqui lo que hago es copiar los valores del hashmap de un fichero a otro.
        try {
            PrintStream escribir = new PrintStream(fileIn);
            escribir.println("Estos son el hashmap que tenemos, con su clave y su valor" + map);
            escribir.println("Estos son los nombres que hay almacenados en el Array " + nombres);

            InputStream file = new FileInputStream(fileIn);
            byte datos[] = file.readAllBytes();

            OutputStream file2 = new FileOutputStream(fileOut);
            file2.write(datos);

        }catch (Exception e){
            System.out.println("No se puede hacer" + e.getMessage());
        }


    }
    public static void copiarFichero (String fileIn, String fileOut){

        try {
            PrintStream escribir = new PrintStream(fileIn);
            Scanner scanner = new Scanner(System.in);
            System.out.println("Que quieres poner en el fichero de entrada: ");
            escribir.println(scanner.nextLine());

            InputStream file = new FileInputStream(fileIn);
            byte datos[] = file.readAllBytes();

            OutputStream file2 = new FileOutputStream(fileOut);
            file2.write(datos);


        }catch (Exception e){
            System.out.println("No se puede cabeza" + e.getMessage());

        }
    }
    public static int DividePorCero(int a, int b){
        int resultado = 0;

        try{
            resultado = a / b;
        }catch (ArithmeticException e){
            throw new ArithmeticException();
        }
        return resultado;
    }
    public static String reverse(String texto) {
       String textoRev = "";

       for(int i = texto.length() - 1; i >= 0; i--){
           textoRev = textoRev + texto.charAt(i) ;
       }

       return textoRev;
    }
}

